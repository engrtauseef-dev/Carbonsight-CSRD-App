import streamlit as st
import pandas as pd
import numpy as np
import openai
import tempfile
from datetime import datetime
from fpdf import FPDF

# -------------------------------
# STREAMLIT APP HEADER
# -------------------------------
st.set_page_config(page_title="CarbonSight CSRD App", layout="wide")

st.title("üåç CarbonSight CSRD App")
st.markdown("AI-powered CSRD compliance & energy efficiency analysis")

# -------------------------------
# USER INPUTS
# -------------------------------
st.sidebar.header("System Parameters")
flow_rate_cfm = st.sidebar.number_input("Flow Rate (CFM)", min_value=100.0, max_value=10000.0, value=2000.0)
discharge_pressure_psia = st.sidebar.number_input("Discharge Pressure (PSIA)", min_value=14.7, max_value=200.0, value=100.0)
theoretical_power_kw = st.sidebar.number_input("Theoretical Power (kW)", min_value=10.0, max_value=5000.0, value=400.0)
actual_power_kw = st.sidebar.number_input("Actual Power (kW)", min_value=10.0, max_value=5000.0, value=500.0)

# Efficiency gap
efficiency_gap_percent = round(((actual_power_kw - theoretical_power_kw) / theoretical_power_kw) * 100, 1)

# -------------------------------
# FAKE AI REPORT (Replace with OpenAI call)
# -------------------------------
final_report_json = {
    "executive_summary": "Your system shows significant improvement opportunities in energy efficiency and CSRD alignment.",
    "technical_analysis": "The compressor is consuming more power than theoretical requirements. Losses can be minimized through leak detection, VSD retrofitting, and pressure optimization.",
    "esrs_s1_analysis": "Your climate-related risks are not fully integrated into reporting. Disclosure alignment required.",
    "esrs_2_analysis": "General disclosures need alignment with ESRS 2 baseline reporting requirements.",
    "materiality_assessment": "Energy efficiency and GHG emissions reduction are highly material issues.",
    "actionable_recommendations": {
        "Install VSD": "Variable Speed Drives can improve energy efficiency by 15-20%.",
        "Leak Detection": "Systematic leak detection and repair reduces waste by 10-15%.",
        "Heat Recovery": "Recover waste heat for secondary use, improving sustainability metrics."
    },
    "estimated_impact": "Potential reduction of 300 tons CO‚ÇÇ annually.",
    "ai_waste_diagnosis": "Excessive pressure levels and leakages are the main inefficiencies identified."
}

# Example ESRS Mapping
esrs_mapping = pd.DataFrame({
    "ESRS Standard": ["E1", "E1", "E2"],
    "Disclosure Requirement": ["Climate Change Mitigation", "Energy Efficiency", "Pollution Reduction"],
    "Our Analysis Provides": ["Yes", "Yes", "Partial"]
})

# -------------------------------
# POLISHED PDF CLASS
# -------------------------------
class CSRDPDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'CSRD Compliance & Energy Efficiency Report', 0, 0, 'C')
        self.ln(20)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, 'Page ' + str(self.page_no()) + ' / {nb}', 0, 0, 'C')
    
    def section_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.set_fill_color(200, 220, 255)
        self.cell(0, 6, title, 0, 1, 'L', 1)
        self.ln(4)
    
    def body_text(self, text):
        self.set_font('Times', '', 12)
        self.multi_cell(0, 5, text)
        self.ln(2)
    
    def key_value_line(self, key, value):
        self.set_font('Times', 'B', 12)
        self.cell(50, 5, key, 0, 0)
        self.set_font('Times', '', 12)
        self.multi_cell(0, 5, value, 0, 1)
        self.ln(1)

# -------------------------------
# STREAMLIT BUTTON TO GENERATE REPORT
# -------------------------------
if st.button("üöÄ Generate Professional CSRD Report"):
    try:
        # -------------------------------
        # Generate Polished PDF Report
        # -------------------------------
        pdf = CSRDPDF()
        pdf.alias_nb_pages()
        pdf.add_page()

        # Title Page
        pdf.set_font('Arial', 'B', 20)
        pdf.cell(0, 20, 'CSRD Compliance & Energy Efficiency Report', 0, 1, 'C')
        pdf.ln(10)

        pdf.set_font('Arial', '', 16)
        pdf.cell(0, 10, 'Generated by CarbonSight AI', 0, 1, 'C')
        pdf.ln(15)

        pdf.set_font('Arial', '', 14)
        pdf.cell(0, 10, f'Date: {datetime.now().strftime("%B %d, %Y")}', 0, 1, 'C')
        pdf.cell(0, 10, f'System: Compressed Air - {flow_rate_cfm} CFM', 0, 1, 'C')
        pdf.ln(20)

        pdf.set_font('Arial', 'I', 12)
        pdf.multi_cell(0, 10, 'This report contains analysis of energy efficiency and CSRD compliance readiness based on physics-based modeling and AI analysis.')

        # Executive Summary
        pdf.add_page()
        pdf.section_title('EXECUTIVE SUMMARY')
        pdf.body_text(final_report_json.get("executive_summary", "No executive summary available."))

        # Technical Analysis
        pdf.section_title('TECHNICAL ANALYSIS')
        pdf.key_value_line('Flow Rate:', f'{flow_rate_cfm} CFM')
        pdf.key_value_line('Discharge Pressure:', f'{discharge_pressure_psia} PSIA')
        pdf.key_value_line('Theoretical Power:', f'{theoretical_power_kw:.1f} kW')
        pdf.key_value_line('Actual Power:', f'{actual_power_kw:.1f} kW')
        pdf.key_value_line('System Efficiency:', f'{(theoretical_power_kw / actual_power_kw) * 100:.1f}%')
        pdf.key_value_line('Efficiency Gap:', f'{efficiency_gap_percent:.0f}% above theoretical optimum')
        pdf.ln(5)
        pdf.body_text(final_report_json.get("technical_analysis", ""))

        # ESRS Analysis
        pdf.add_page()
        pdf.section_title('ESRS S1 CLIMATE ANALYSIS')
        pdf.body_text(final_report_json.get("esrs_s1_analysis", ""))

        pdf.section_title('ESRS 2 GENERAL DISCLOSURES')
        pdf.body_text(final_report_json.get("esrs_2_analysis", ""))

        # Materiality Assessment
        pdf.section_title('MATERIALITY ASSESSMENT')
        pdf.body_text(final_report_json.get("materiality_assessment", ""))

        # Recommendations
        pdf.add_page()
        pdf.section_title('ACTIONABLE RECOMMENDATIONS')
        recommendations = final_report_json.get("actionable_recommendations", {})
        if isinstance(recommendations, dict):
            for key, value in recommendations.items():
                pdf.set_font('Times', 'B', 12)
                pdf.cell(0, 6, f'‚Ä¢ {key}:', 0, 1)
                pdf.set_font('Times', '', 12)
                pdf.multi_cell(0, 5, f'   {value}')
                pdf.ln(2)
        else:
            pdf.body_text(str(recommendations))

        # Estimated Impact
        pdf.section_title('ESTIMATED IMPACT')
        pdf.body_text(final_report_json.get("estimated_impact", ""))

        # AI Waste Diagnosis
        pdf.section_title('AI WASTE DIAGNOSIS')
        pdf.body_text(final_report_json.get("ai_waste_diagnosis", ""))

        # ESRS Mapping Table
        pdf.add_page()
        pdf.section_title('ESRS DISCLOSURE MAPPING')

        col_width = pdf.w / 3.5
        pdf.set_font('Arial', 'B', 10)
        pdf.cell(col_width, 8, 'ESRS Standard', 1, 0, 'C')
        pdf.cell(col_width, 8, 'Disclosure', 1, 0, 'C')
        pdf.cell(col_width, 8, 'Our Analysis', 1, 1, 'C')

        pdf.set_font('Arial', '', 9)
        for _, row in esrs_mapping.iterrows():
            pdf.cell(col_width, 6, str(row['ESRS Standard']), 1, 0)
            pdf.multi_cell(col_width, 6, str(row['Disclosure Requirement']), 1, 'L')
            pdf.set_xy(pdf.get_x() + col_width * 2, pdf.get_y() - 6)
            pdf.multi_cell(col_width, 6, str(row['Our Analysis Provides']), 1, 'L')
            pdf.set_xy(pdf.get_x(), pdf.get_y())

        # Disclaimer
        pdf.add_page()
        pdf.section_title('DISCLAIMER')
        pdf.set_font('Times', 'I', 10)
        pdf.multi_cell(0, 5, 'This report is generated automatically by CarbonSight AI based on user inputs and physics-based modeling. While we strive for accuracy, this report should be reviewed by qualified sustainability professionals before use for compliance purposes. CarbonSight AI is not liable for decisions made based on this report.')

        # Save and offer download
        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp_file:
            pdf.output(tmp_file.name)
            with open(tmp_file.name, "rb") as f:
                pdf_bytes = f.read()
            
            st.download_button(
                label="üì• Download Professional PDF Report",
                data=pdf_bytes,
                file_name=f"CarbonSight_CSRD_Report_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                mime="application/pdf"
            )

    except Exception as e:
        st.error(f"Error generating report: {e}")
